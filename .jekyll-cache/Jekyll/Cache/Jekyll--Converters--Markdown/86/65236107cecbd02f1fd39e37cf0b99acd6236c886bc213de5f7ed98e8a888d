I"¢1<div class="publications">


  <h2 class="year">2020</h2>
  <ol class="bibliography"></ol>

  <h2 class="year">2021</h2>
  <ol class="bibliography"><li><div class="row">
  <div class="col-sm-2 abbr">
  
    
    <abbr class="badge">IEEE</abbr>
    
  
  </div>

  <div id="CR1" class="col-sm-8">
    
      <div class="title">Transformers for GUI Testing: A Plausible solution to Automated Test Case Generation and Flaky Tests</div>
      <div class="author">
        
          
          
          
          
          
          
            
              
                
                  Khaliq, Zubair,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  Farooq, Sheikh Umar,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  and Khan, Dawood Ashraf
                
              
            
          
        
      </div>

      <div class="periodical">
      
        <em>IEEE Computer</em>
      
      
        Dec
      
      
        2021
      
      </div>
    

    <div class="links">
    
      <a class="abstract btn btn-sm z-depth-0" role="button">Abs</a>
    
    
    
    
      <a href="" class="btn btn-sm z-depth-0" role="button">HTML</a>
    
    
      
      <a href="/assets/pdf/" class="btn btn-sm z-depth-0" role="button">PDF</a>
      
    
    
    
    
    
    
    
    </div>

    <!-- Hidden abstract block -->
    
    <div class="abstract hidden">
      <p>Artificial Intelligence (AI) has made significant progress in software testing as it is being incorporated in all stages of the software test life cycle (STLC). However, there are still formidable challenges within the software testing activities in the STLC. Despite the use of automation tools for activities like test case generation and repairing flaky tests at the GUI level of the test pyramid, the limitations of current automation tools still force us to carry out a large amount of manual testing. In this paper, we propose a novel method to address challenges within these two activities of the STLC. We study the use of a language-based transformer to automate the process of test case generation directly from the GUI description instead of relying on the test specification document from which test cases are extracted manually. Further, we demonstrate how our approach deals with the problem of flaky tests.</p>
    </div>
    

    <!-- Hidden bibtex block -->
    
  </div>
</div>
</li>
<li><div class="row">
  <div class="col-sm-2 abbr">
  
    
    <abbr class="badge">IEEE</abbr>
    
  
  </div>

  <div id="CR2" class="col-sm-8">
    
      <div class="title">AI Bots in functional UI Testing: The Testers Companion</div>
      <div class="author">
        
          
          
          
          
          
          
            
              
                
                  Khaliq, Zubair,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  Khan, Dawood Ashraf,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  and Farooq, Sheikh Umar
                
              
            
          
        
      </div>

      <div class="periodical">
      
        <em>IEEE Software</em>
      
      
        Dec
      
      
        2021
      
      </div>
    

    <div class="links">
    
      <a class="abstract btn btn-sm z-depth-0" role="button">Abs</a>
    
    
    
    
      <a href="" class="btn btn-sm z-depth-0" role="button">HTML</a>
    
    
      
      <a href="/assets/pdf/" class="btn btn-sm z-depth-0" role="button">PDF</a>
      
    
    
    
    
    
    
    
    </div>

    <!-- Hidden abstract block -->
    
    <div class="abstract hidden">
      <p>The importance of software testing is growing rapidly in the industry. The fast-paced, always-evolving and highly competitive software development lifecycle and the increasing complexity of software systems have created the perfect storm for software testing. Although automating the testing process helps cope with the pace, still we are unable to produce high-quality software given the timeline of the deliverables. AI is seen as a new and exciting technology that could bring something new to the software testing world and make it even more efficient. In this paper, we present a Novel Deep Learning-Based test automation framework for automated functional User Interface (UI) testing of e-commerce applications that is capable of producing near-human level test cases and automatically repairing flaky test scripts when the UI is modified.</p>
    </div>
    

    <!-- Hidden bibtex block -->
    
  </div>
</div>
</li>
<li><div class="row">
  <div class="col-sm-2 abbr">
  
    
    <abbr class="badge">ELSEVIER</abbr>
    
  
  </div>

  <div id="CR3" class="col-sm-8">
    
      <div class="title">A Deep Learning-based automated framework for functional User Interface testing</div>
      <div class="author">
        
          
          
          
          
          
          
            
              
                
                  Khaliq, Zubair,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  Farooq, Sheikh Umar,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  and Khan, Dawood Ashraf
                
              
            
          
        
      </div>

      <div class="periodical">
      
        <em>Information and Software technology</em>
      
      
        Dec
      
      
        2021
      
      </div>
    

    <div class="links">
    
      <a class="abstract btn btn-sm z-depth-0" role="button">Abs</a>
    
    
    
    
      <a href="" class="btn btn-sm z-depth-0" role="button">HTML</a>
    
    
      
      <a href="/assets/pdf/example_pdf.pdf" class="btn btn-sm z-depth-0" role="button">PDF</a>
      
    
    
    
    
    
    
    
    </div>

    <!-- Hidden abstract block -->
    
    <div class="abstract hidden">
      <p>Context: The use of automation tools in software testing helps keep pace with the timeline of the deliverables. Over time with the inclusion of continuous integration/continuous delivery (CI/CD) pipelines, automation tools are becoming less effective. The testing community is turning to AI to help keep the pace.
Objective: We study the use of transformers to automate the process of test case generation di- rectly from the User Interface (UI) element description instead of relying on the test specification document from which test cases are extracted manually. We also demonstrate the capability of the proposed approach in repairing flaky tests.
Method: We employ DEtection TRansformer (DETR) for detecting the UI elements from an application UI automatically without requiring a tester to locate complex-scripted UI elements. We also use Tesseract to automatically identify the text present on the UI elements. We trans- form the generated UI element description to actual test designer-written test cases using text- generation transformers like GPT-2 and T5. The generated test cases are then translated into executable test scripts using a simple parser. We carry out our cases study on 25 e-commerce applications.
Results: DETR detected the elements with an mAP of 70.1 highlighting the effectiveness of the model to detect UI elements. After applying post-processing methods (like inverting RGB val- ues, applying Gaussian thresholding, using contours from OpenCV) to images the effectiveness of Tesseract in detecting the text from UI pages increased from 58% to 95%. We prove that both GPT-2 and T5 are effective in generating test designer-written test cases upon being finetuned, as we record BLEU of 98.171*10-2 and 98.436*10-2 respectively for the test set.
Conclusion: It is concluded that the proposed approach can be used with current automation tools in the industry to enhance their capability in generating test cases and repairing the flaky tests.</p>
    </div>
    

    <!-- Hidden bibtex block -->
    
  </div>
</div>
</li>
<li><div class="row">
  <div class="col-sm-2 abbr">
  
    
    <abbr class="badge">TAF</abbr>
    
  
  </div>

  <div id="CR4" class="col-sm-8">
    
      <div class="title">Model-Based Framework for exploiting sensors of IoT devices using a Botnet: A case study with Android</div>
      <div class="author">
        
          
          
          
          
          
          
            
              
                
                  Khaliq, Zubair,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  Khan, Dawood Ashraf,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  Baba, Asif Iqbal,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  Ali, Shahbaz,
                
              
            
          
        
          
          
          
          
          
          
            
              
                
                  and Farooq, Sheikh Umar
                
              
            
          
        
      </div>

      <div class="periodical">
      
        <em>Cyber-Physical Systems</em>
      
      
        Dec
      
      
        2021
      
      </div>
    

    <div class="links">
    
      <a class="abstract btn btn-sm z-depth-0" role="button">Abs</a>
    
    
    
    
      <a href="" class="btn btn-sm z-depth-0" role="button">HTML</a>
    
    
      
      <a href="/assets/pdf/" class="btn btn-sm z-depth-0" role="button">PDF</a>
      
    
    
    
    
    
    
    
    </div>

    <!-- Hidden abstract block -->
    
    <div class="abstract hidden">
      <p>Botnets have become a serious security threat not only to the Internet but also to the devices connected to it. Factors
like the exponential growth of IoT, the COVID-19 pandemic thatâs sweeping the planet, and the ever-larger number
of cybercriminals who now have access to or have developed increasingly more sophisticated tools are incentivizing
the growth of botnets in this domain. The recent outbreak of botnets like Dark Nexus (derived from Qbot and Mirai),
Mukashi, LeetHozer, and Hoaxcalls, etc. shows the alarming rate at which this threat is converging. The botnets have
attributes that make them an excellent platform for malicious activities in IoT devices. These IoT devices are used by
organizations that need to both innovate and safeguard the personal and confidential data of their customers, employees, and business partners. The IoT devices have built-in sensors or actuators which can be exploited to monitor or
control the physical environment of the entities connected to them thereby violating the fundamental concept of privacyby-design of these devices. In this paper, we design and describe a modular botnet framework for IoT. Our framework
is communication channel independent because it utilizes various available communication channels for command and
control of an IoT device. The framework uses an enhanced centralized architecture associated with a novel âDomain
Fluxing Techniqueâ. The proposed framework will provide insights into how privacy in IoT devices can be incorporated at design time to check the sensors and actuators in these devices against malicious exploitation consequently
preserving privacy. This paper includes design considerations, command and control structures, characteristics, capabilities, intrusion, and other related work. Furthermore, proof of concept Botnet is implemented and explained using
the developed framework.</p>
    </div>
    

    <!-- Hidden bibtex block -->
    
  </div>
</div>
</li></ol>


</div>
:ET